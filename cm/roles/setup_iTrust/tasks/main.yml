---
- name: include variables
  include_vars:
    file: /home/encrypted_variables.yml

- name: Run apt-get update
  apt:
    update_cache: yes

- name: Install Maven
  apt:
    name: maven
    state: present

- name: Install MySQL
  apt:
    name: mysql-server
    state: present

- name: Install python3-mysqldb
  apt:
    name: python3-mysqldb
    state: present

- name: Start mysql
  service:
    name: mysql
    state: started
    enabled: True

- name: Set MySQL root Password
  mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: admin
    password: "{{jenkins_password}}"
    priv: '*.*:ALL'
    state: present
  become: yes

- name: Change application
  shell: sudo dos2unix /bakerx/application.yml

- name: Copy file
  shell: cp /bakerx/application.yml /home/application.yml

- name: Change application file
  lineinfile:
    path: /home/application.yml
    regexp: '^    username:'
    line: '    username: admin'

- name: Change application file 2
  lineinfile:
    path: /home/application.yml
    regexp: '^    password:'
    line: '    password: {{jenkins_password}}'


- name: Start Jenkins service and enable on boot
  service:
    name: jenkins
    state: restarted
    enabled: yes

- name: Wait until Jenkins web API is available
  shell: curl --head --silent http://192.168.33.20:9000//cli/
  register: result
  until: result.stdout.find("403") != -1
  retries: 30
  delay: 10

- name: Delete git credentials (if already created) in Jenkins
  shell:
    cmd: java -jar /home/jenkins-cli.jar -auth {{ jenkins_password }}:{{ jenkins_password }} -s http://localhost:9000
      delete-credentials system::system::jenkins _ kenil
    chdir: /home/vagrant/
  ignore_errors: True

- name: Create Credentials
  block:
    - name: Adding Credentials
      shell: "java -jar /home/jenkins-cli.jar -auth admin:{{jenkins_password}} -s http://localhost:9000/
      create-credentials-by-xml system::system::jenkins _  < /bakerx/credential.xml"
  rescue:
    - name: Credentials already exists
      shell: "echo Done"

- name: Does the Google apt file exist?
  command: test -f /etc/apt/sources.list.d/google-chrome.list
  register: google_apt_exists
  ignore_errors: True

- name: Add Google Chrome key
  shell: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  when: google_apt_exists.rc == 1

- name: Add Google Chrome repo
  copy: content="deb http://dl.google.com/linux/chrome/deb/ stable main" dest="/etc/apt/sources.list.d/google-chrome.list" owner=root group=root mode=644
  when: google_apt_exists.rc == 1

- name: Update apt cache
  apt: update_cache=yes
  when: google_apt_exists.rc == 1

- name: Install Google Chrome
  apt: pkg=google-chrome-stable state=latest

- name: install chromedriver dependencies
  become: yes
  apt: pkg={{ item }} state=latest
  with_items:
    - libnss3
    - libgconf-2-4
    - zip

- name: get chromedriver latest version number
  uri:
    url: http://chromedriver.storage.googleapis.com/LATEST_RELEASE
    return_content: yes
    headers:
      Content-Type: "text/plain"
  register: latest_chromedriver

- name: download chromedriver
  become: yes
  unarchive:
    src: "https://chromedriver.storage.googleapis.com/{{ latest_chromedriver.content|trim }}/chromedriver_linux64.zip"
    dest: /usr/local/bin
    remote_src: yes
  ignore_errors: True